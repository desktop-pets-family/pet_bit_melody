name: pet-bit-melody-pypi

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  SETUP_FILE: setup.py
  TAG_FILE: version.txt
  IS_RELEASE: is_release.txt
  MATRIX_VERSION_PUBLISHING: "3.10"
  SOURCE_CODE_PATH: server/main.py
  LATEST_TAG: ""

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get Latest Tag
      id: get_latest_tag
      run: |
        echo "Getting tags"
        # git fetch --tags # Make sure to fetch the tags first
        echo "Updated the list"
        latest_tag=$(git tag --list "v*" | sort -rV | head -n 1)
        echo "Tag list: $(git tag -l)"
        echo "Latest tag = $latest_tag"
        if [ "$latest_tag" == "" ]; then
          echo "No tags found matching 'v*'."
          latest_tag="v1.0.0"
          echo "Using a default tag: $latest_tag"
        else
          echo "Latest Tag: $latest_tag"
        fi
        echo "$latest_tag" > ${{env.TAG_FILE}}
        echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
        echo -e "\n\n\n\n\n\n\n\n\n"
        echo "new_tag = $latest_tag"
        echo "env.new_tag = ${{env.tag_file}}"
        echo "cat env.new_tag = $(cat ${{env.TAG_FILE}})"
        echo "env.LATEST_TAG = ${{env.LATEST_TAG}}"
        echo -e "\n\n\n\n\n\n\n\n\n"

    - name: Update module version in source code and builder file
      run: |
        latest_tag="$(cat ${{env.TAG_FILE}})"
        if [ -f ${{env.SETUP_FILE}} ]
        then
          echo "Updating version in ${{env.SETUP_FILE}}"
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "Tag: $latest_tag"
          latest_tag=${latest_tag/"v"/""}
          echo "Tag: $latest_tag"
          sed -i "s/version='.*'/version='$latest_tag'/g" ${{env.SETUP_FILE}}
          sed -i "s/self.__version__ = '.*'/self.__version__ = '$latest_tag'/g" ${{env.SOURCE_CODE_PATH}}
        fi
        echo "Content: $(ls)"
        echo "Content of file: $(cat ${{env.SETUP_FILE}})"
        echo -e "\n\n\n\n\n\n\n\n\n"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        lib_packages=$(find ./*/ -name "requirements.txt" -type f)
        first_requirement=$(echo $lib_packages | cut -d " " -f 1)
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest
    - name: building the package
      run: |
        pip install build
        python -m build
    # Add the following steps if you want to publish to PyPI
    - name: Build and publish to PyPI
      if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == env.MATRIX_VERSION_PUBLISHING
      run: |
        python -m build
        pip install twine
        twine upload dist/* --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
